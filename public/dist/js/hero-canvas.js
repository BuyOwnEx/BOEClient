/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/*!*********************************************!*\
  !*** ./resources/js/plugins/hero-canvas.js ***!
  \*********************************************/
eval('var ClassicalNoise = function ClassicalNoise(r) {\n  // Classic Perlin noise in 3D, for comparison \n  if (r === undefined) r = Math;\n  this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\n  this.p = [];\n\n  for (var i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  } // To remove the need for index wrapping, double the permutation table length\n\n\n  this.perm = [];\n\n  for (var i = 0; i < 512; i++) {\n    this.perm[i] = this.p[i & 255];\n  }\n};\n\nClassicalNoise.prototype.dot = function (g, x, y, z) {\n  return g[0] * x + g[1] * y + g[2] * z;\n};\n\nClassicalNoise.prototype.mix = function (a, b, t) {\n  return (1.0 - t) * a + t * b;\n};\n\nClassicalNoise.prototype.fade = function (t) {\n  return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}; // Classic Perlin noise, 3D version \n\n\nClassicalNoise.prototype.noise = function (x, y, z) {\n  // Find unit grid cell containing point\n  var X = Math.floor(x);\n  var Y = Math.floor(y);\n  var Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n  x = x - X;\n  y = y - Y;\n  z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n  X = X & 255;\n  Y = Y & 255;\n  Z = Z & 255; // Calculate a set of eight hashed gradient indices\n\n  var gi000 = this.perm[X + this.perm[Y + this.perm[Z]]] % 12;\n  var gi001 = this.perm[X + this.perm[Y + this.perm[Z + 1]]] % 12;\n  var gi010 = this.perm[X + this.perm[Y + 1 + this.perm[Z]]] % 12;\n  var gi011 = this.perm[X + this.perm[Y + 1 + this.perm[Z + 1]]] % 12;\n  var gi100 = this.perm[X + 1 + this.perm[Y + this.perm[Z]]] % 12;\n  var gi101 = this.perm[X + 1 + this.perm[Y + this.perm[Z + 1]]] % 12;\n  var gi110 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z]]] % 12;\n  var gi111 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]] % 12; // The gradients of each corner are now:\n  // g000 = grad3[gi000];\n  // g001 = grad3[gi001];\n  // g010 = grad3[gi010];\n  // g011 = grad3[gi011];\n  // g100 = grad3[gi100];\n  // g101 = grad3[gi101];\n  // g110 = grad3[gi110];\n  // g111 = grad3[gi111];\n  // Calculate noise contributions from each of the eight corners\n\n  var n000 = this.dot(this.grad3[gi000], x, y, z);\n  var n100 = this.dot(this.grad3[gi100], x - 1, y, z);\n  var n010 = this.dot(this.grad3[gi010], x, y - 1, z);\n  var n110 = this.dot(this.grad3[gi110], x - 1, y - 1, z);\n  var n001 = this.dot(this.grad3[gi001], x, y, z - 1);\n  var n101 = this.dot(this.grad3[gi101], x - 1, y, z - 1);\n  var n011 = this.dot(this.grad3[gi011], x, y - 1, z - 1);\n  var n111 = this.dot(this.grad3[gi111], x - 1, y - 1, z - 1); // Compute the fade curve value for each of x, y, z\n\n  var u = this.fade(x);\n  var v = this.fade(y);\n  var w = this.fade(z); // Interpolate along x the contributions from each of the corners\n\n  var nx00 = this.mix(n000, n100, u);\n  var nx01 = this.mix(n001, n101, u);\n  var nx10 = this.mix(n010, n110, u);\n  var nx11 = this.mix(n011, n111, u); // Interpolate the four results along y\n\n  var nxy0 = this.mix(nx00, nx10, v);\n  var nxy1 = this.mix(nx01, nx11, v); // Interpolate the two last results along z\n\n  var nxyz = this.mix(nxy0, nxy1, w);\n  return nxyz;\n};\n\nvar canvas = document.getElementById(\'waves\');\n\nif (canvas) {\n  var draw = function draw() {\n    ctx.shadowColor = \'rgba(195,204,224)\';\n    ctx.shadowBlur = 0;\n\n    for (var i = 0; i <= maxLines; i++) {\n      ctx.beginPath();\n      ctx.moveTo(0, startY);\n\n      for (var x = 0; x <= canvasWidth; x++) {\n        var y = perlin.noise(x * variation + variators[i], x * variation, 0);\n        ctx.lineTo(x, startY + amp * y);\n      }\n\n      var color = Math.floor(150 * Math.abs(y));\n      var alpha = Math.min(Math.abs(y), .7) + .1;\n      ctx.strokeStyle = \'rgba(3,164,194,\' + alpha + \')\';\n      ctx.stroke();\n      ctx.closePath();\n      variators[i] += .002;\n    }\n  };\n\n  var animate = function animate() {\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    draw();\n    requestAnimationFrame(animate);\n  };\n\n  var resizeCanvas = function resizeCanvas() {\n    canvasWidth = document.documentElement.clientWidth;\n    canvasHeight = document.documentElement.clientHeight;\n    canvas.setAttribute(\'width\', canvasWidth);\n    canvas.setAttribute(\'height\', canvasHeight);\n    startY = canvasHeight / 2;\n  };\n\n  var ctx = canvas.getContext(\'2d\'),\n      perlin = new ClassicalNoise(),\n      variation = .001,\n      amp = 800,\n      maxLines = 52,\n      variators = [],\n      canvasWidth,\n      canvasHeight,\n      startY;\n\n  for (var i = 0, u = 0; i < maxLines; i++, u += .02) {\n    variators[i] = u;\n  }\n\n  (function init() {\n    resizeCanvas();\n    animate();\n    window.addEventListener(\'resize\', resizeCanvas);\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/plugins/hero-canvas.js\n');
/******/ })()
;